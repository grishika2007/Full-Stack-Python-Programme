{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "235634ca-a0c0-4130-b650-e6a723d2fcc4",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['apple', 'banana', 'mango', 'orange']\n",
      "mango\n"
     ]
    }
   ],
   "source": [
    "fruits = [\"apple\" ,\"banana\" , \"mango\" ]  \n",
    "fruits. append(\"orange\")\n",
    "print(fruits)\n",
    "print(fruits[2])"
   ]
  },
  {
   "cell_type": "raw",
   "id": "11aae7be-1ec2-42cc-8a7e-7859dafb3e98",
   "metadata": {},
   "source": [
    "cars = [\"bmw\" , \"audi\" , \"tesla\" ]\n",
    "cars. append(\"lambo\")\n",
    "print(cars)\n",
    "print(cars[2]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "68bdc65e-a15d-471f-8dc8-c34f97611144",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['bmw', 'audi', 'tesla', 'lambo']\n",
      "tesla\n"
     ]
    }
   ],
   "source": [
    "cars = [\"bmw\", \"audi\", \"tesla\" ]\n",
    "cars. append (\"lambo\")\n",
    "print(cars)\n",
    "print(cars[2])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "dc0e2976-7b33-461b-90dc-5cd8128d54e5",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['cabbage', 'onion', 'tomato']\n",
      "onion\n"
     ]
    }
   ],
   "source": [
    "vegetables = [\"aloo\", \"onion\", \"cabbage\"]\n",
    "vegetables.append (\"tomato\")\n",
    "vegetables.remove(\"aloo\")\n",
    "vegetables.sort()\n",
    "print(vegetables)\n",
    "print(vegetables[1])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "ecb67e04-d934-4bcc-a5e0-ea9b276c0fcf",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "red\n",
      "('red', 'pink', 'blue')\n"
     ]
    }
   ],
   "source": [
    "colors = (\"red\", \"pink\", \"blue\")\n",
    "print(colors[0])\n",
    "# colors[1] = \"yellow\"\n",
    "print(colors)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "99f08924-df98-4832-8e8a-3772358998c6",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{1, 2, 3, 4, 5}\n"
     ]
    }
   ],
   "source": [
    "numbers = {1,2,3,3,4}\n",
    "numbers.add(5)\n",
    "print(numbers)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "eae71866-488b-4bd6-a468-724bc8f84beb",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "grishika\n",
      "{'name': 'grishika', 'age': 18, 'course': 'python full stack ', 'college': 'ABC University'}\n",
      "dict_keys(['name', 'age', 'course', 'college'])\n",
      "dict_values(['grishika', 18, 'python full stack ', 'ABC University'])\n"
     ]
    }
   ],
   "source": [
    "student = {\n",
    "    \"name\" : \"grishika\",\n",
    "    \"age\"  : 18,\n",
    "    \"course\" : \"python full stack \"}\n",
    "student[\"college\"] = \"ABC University\"\n",
    "print(student[\"name\"])\n",
    "student[\"age\"] = 18\n",
    "print(student)\n",
    "print(student.keys())\n",
    "print(student.values())\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "5c45b900-a300-4614-8762-685b96b19b9a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Grade : B\n"
     ]
    }
   ],
   "source": [
    "marks = 75\n",
    "if marks >= 90:\n",
    "    print(\"Grade: A\")\n",
    "elif marks >= 75:\n",
    "    print(\"Grade : B\")\n",
    "elif marks >= 50:\n",
    "    print(\"Grade : C\")\n",
    "else :\n",
    "    print(\"Grade: FAIL\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "d1131ae3-bb4d-49ec-bf46-b2bdedfdbcbf",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number: 1\n",
      "Number: 2\n",
      "Number: 3\n",
      "Number: 4\n",
      "Number: 5\n"
     ]
    }
   ],
   "source": [
    "for i in range(1,6):\n",
    "    print(\"Number:\", i)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "e9d53522-f808-4b55-a720-b17ccfb24488",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Count: 1\n",
      "Count: 2\n",
      "Count: 3\n",
      "Count: 4\n",
      "Count: 5\n"
     ]
    }
   ],
   "source": [
    "Count = 1\n",
    "while Count <= 5:\n",
    "    print(\"Count:\", Count)\n",
    "    Count += 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "6e29b314-c1fc-4d19-a66c-0b6936794012",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1\n",
      "2\n",
      "3\n",
      "4\n"
     ]
    }
   ],
   "source": [
    "for i in range  (1, 10):\n",
    "    if i == 5:\n",
    "        break\n",
    "    print(i)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "a1f378da-fca0-46f7-88e0-0255bb5a738b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "10\n",
      "11\n",
      "12\n",
      "13\n",
      "14\n",
      "15\n",
      "16\n",
      "17\n"
     ]
    }
   ],
   "source": [
    "for i in range (10, 20):\n",
    "    if  i == 18:\n",
    "        break\n",
    "    print(i)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "054dcb58-96d3-47e4-a470-ac743f14c128",
   "metadata": {},
   "outputs": [],
   "source": [
    "S"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python [conda env:base] *",
   "language": "python",
   "name": "conda-base-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.13.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
